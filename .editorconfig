# See https://github.com/RehanSaeed/EditorConfig for updates to this file.
# See http://EditorConfig.org for more information about .editorconfig files.

#################
# Common Settings
#################

# This file is the top-most EditorConfig file
root = true

# All Files
[*]
charset = utf-8
end_of_line = crlf
indent_style = space
indent_size = 4
insert_final_newline = false
trim_trailing_whitespace = true

#########################
# File Extension Settings
#########################

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Various XML Configuration Files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# JSON Files
[*.{json,json5}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.md]
trim_trailing_whitespace = false

# Web Files
[*.{htm,html,js,ts,tsx,css,sass,scss,less,svg,vue}]
indent_size = 2
insert_final_newline = true

# Batch Files
[*.{cmd,bat}]

# Bash Files
[*.sh]
end_of_line = lf

###########################
# .NET Language Conventions
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#language-conventions
###########################

# .NET Code Style Settings
[*.{cs,csx,cake,vb}]
# "this." and "Me." qualifiers
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#this_and_me
dotnet_style_qualification_for_field = true:warning
dotnet_style_qualification_for_property = true:warning
dotnet_style_qualification_for_method = true:warning
dotnet_style_qualification_for_event = true:warning
# Language keywords instead of framework type names for type references
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#language_keywords
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning
# Modifier preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#normalize_modifiers
dotnet_style_require_accessibility_modifiers = always:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async
dotnet_style_readonly_field = true:warning
# Parentheses preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#parentheses
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
# Expression-level preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#expression_level
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
# Null-checking preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#null_checking
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning

# C# Code Style Settings
[*.{cs,csx,cake}]
# Implicit and explicit types
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#implicit-and-explicit-types
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning
# Expression-bodied members
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#expression_bodied_members
csharp_style_expression_bodied_methods = true:warning
csharp_style_expression_bodied_constructors = true:warning
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning
# Pattern matching
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#pattern_matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
# Inlined variable declarations
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#inlined_variable_declarations
csharp_style_inlined_variable_declaration = true:warning
# Expression-level preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#expression_level_csharp
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
# "Null" checking preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#null_checking_csharp
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning
# Code block preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#code_block
csharp_prefer_braces = true:warning

#############################
# .NET Formatting Conventions
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#formatting-conventions
#############################

# Organize usings
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#usings
dotnet_sort_system_directives_first = true
# C# formatting settings
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#c-formatting-settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
# Indentation options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#indent
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
# Spacing options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#spacing
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = expressions
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
# Wrapping options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#wrapping
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true
# More Indentation options (Undocumented)
csharp_indent_block_contents = true
csharp_indent_braces = false
# Spacing Options (Undocumented)
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_square_brackets = false

#########################
# .NET Naming conventions
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions
#########################

[*.{cs,csx,cake,vb}]
######################################################################
# Symbols Groups
######################################################################

# BEGIN DOCUMENTATION FOR NAMING CONVENTIONS FOR FIELDS ==============
# .NET Coding guidelines treat protected and public fields identically
# .NET Coding guidelines generally disallow public fields.
# The two exceptions are (1) public const fields and
# (2) public static readonly fields.
#
# .NET Naming Conventions explicitly exclude private and internal
# items, but otherwise require PascalCase for fields.
#
# Therefore, I propose default naming rules that depend on:
# * {true|false} allowed type of field, per Coding guidelines?
# * {PascalCase|null} naming guideline that applies
#
# This gives the following groupings of symbols:
# A. {true, PascalCase} == public const, protected const
# B. {true, PascalCase} == public static readonly, protected static readonly
# -- {true, null      } == *** user-specified rules for private, internal, and protected fields ***
# L. {true, null      } == catch-all for private, internal, and protected fields
# M. {false,*         } == all other fields, as they are disallowed by .NET coding guidelines.
#
# END DOCUMENTATION FOR NAMING CONVENTIONS FOR FIELDS ================

# A. public_constant_fields_group - allowed by design guidelines, and naming guidelines indicate PascalCasing
dotnet_naming_symbols.public_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.public_constant_fields_group.applicable_kinds           = field

# B. public_static_readonly_fields_group - allowed by design guidelines, and naming guidelines indicate PascalCasing
dotnet_naming_symbols.public_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_static_readonly_fields_group.applicable_kinds           = field

# BEGIN USER SYMBOL GROUPS ===========================================
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# *** User can create any number of groupings for fields that are not 'local'
#     without impinging on .NET Naming Guidelines.

## C. all_constant_fields_group - mimic group B but apply to ALL accessibility levels
#dotnet_naming_symbols.all_constant_fields_group.applicable_accessibilities = public, protected, internal, private, protected_internal, private_protected
#dotnet_naming_symbols.all_constant_fields_group.required_modifiers         = const
#dotnet_naming_symbols.all_constant_fields_group.applicable_kinds           = field

## D. all_static_readonly_fields_group - mimic group A but apply to ALL accessibility levels
#dotnet_naming_symbols.all_static_readonly_fields_group.applicable_accessibilities = public, protected, internal, private, protected_internal, private_protected
#dotnet_naming_symbols.all_static_readonly_fields_group.required_modifiers         = static, readonly
#dotnet_naming_symbols.all_static_readonly_fields_group.applicable_kinds           = field

## K. user_private_fields_group - allowed by coding guidelines, but naming is not specified by naming guidelines -- Set to PascalCase
#dotnet_naming_symbols.user_private_fields_group.applicable_accessibilities = internal, private, private_protected
#dotnet_naming_symbols.user_private_fields_group.applicable_kinds           = field

# *** NOTE: StyleCop and other additional rulesets may add or require more splits here also.
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# END USER SYMBOL GROUPS =============================================

# L. private_fields_group - allowed by coding guidelines, but naming is not specified by naming guidelines -- Set to SILENT below
dotnet_naming_symbols.private_fields_group.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_fields_group.applicable_kinds           = field

# M. match_all_fields_group - RULES should first use all above-matched field symbol groups...
#    If it doesn't match any of A/B/L (or user symbols groups), then the field is disallowed by coding guidelines
dotnet_naming_symbols.match_all_fields_group.applicable_kinds = field

# Q. public_symbols_group - Define any public symbol
dotnet_naming_symbols.public_symbols_group.applicable_accessibilities = public, internal, protected, protected_internal
dotnet_naming_symbols.public_symbols_group.applicable_kinds = method, property, event, delegate
# T. parameters - Defines any parameter
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
# W. non_interface_types - Defines class, struct, enum and delegate types
dotnet_naming_symbols.non_interface_types_group.applicable_kinds = class, struct, enum, delegate
# Z. interface_types - Defines interfaces
dotnet_naming_symbols.interface_types_group.applicable_kinds = interface


######################################################################
# Styles
######################################################################
# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the Pascal_case style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_interface_with_i_style.required_prefix = I
# prefix_with_underscore_style - some codebases use underscore prefix for private/internal items
dotnet_naming_style.prefix_with_underscore_style.capitalization = pascal_case
dotnet_naming_style.prefix_with_underscore_style.required_prefix = _
# disallowed_by_design_guidelines_style - use to auto-format items that are disallowed by the design guidelines
dotnet_naming_style.disallowed_by_design_guidelines_style.capitalization = pascal_case
dotnet_naming_style.disallowed_by_design_guidelines_style.required_prefix = ____INVALID____
dotnet_naming_style.disallowed_by_design_guidelines_style.required_suffix = ____INVALID____

######################################################################
# Rules
######################################################################

# Naming Rules
# BEGIN OLD RULES =====================================================
# Here is a breakdown of what the old rules applied to,
# the old rule results, and what happens under the new rules.
#
#
# ##  OLD SYMBOL GROUP                OLD STYLE           COMMENTS
# ---------------------------------------------------------------------
#  1 == constant_fields_must_be_pascal_cased
#  1  field    / public    / const       PascalCase       Same
#  1  field    / protected / const       PascalCase       Same
#  1  field    / private   / const       PascalCase       Same + (can be overriden)
#  1  field    / internal  / const       PascalCase       Same + (can be overriden)
#  1  field    / prot+int  / const       PascalCase       Same + (can be overriden)
#
#  2 == non_private_readonly_fields_must_be_pascal_case
#  2  field    / public    / static+RO   PascalCase       Same
#  2  field    / public    / readonly    PascalCase       *** Violation of .NET Coding Guidelines ***
#  2  field    / protected / static+RO   PascalCase       Same
#  2  field    / protected / readonly    PascalCase       *** Violation of .NET Coding Guidelines ***
#  2  field    / internal  / static+RO   PascalCase       Same + (can be overriden)
#  2  field    / internal  / readonly    PascalCase       Same + (can be overriden)
#
#  3 == static_readonly_fields_must_be_pascal_case
#  1  field    / public    / const       PascalCase       Same
#  1  field    / protected / const       PascalCase       Same
#  1  field    / private   / const       PascalCase       Same + (can be overriden)
#  1  field    / internal  / const       PascalCase       Same + (can be overriden)
#  1  field    / prot+int  / const       PascalCase       Same + (can be overriden)
#
#  4 == private_readonly_fields_must_be_camel_case
#  4  field    / private   / readonly    PascalCase       Same + (can be overriden)
#
#  5 == public_internal_fields_must_be_pascal_case
#  5  field    / public    / *           PascalCase       *** Violation of .NET Coding Guidelines ***
#  5  field    / internal  / *           PascalCase       Same + (can be overridden)
#
#  6 == private_protected_fields_must_be_camel_case
#  6  field    / protected / *           PascalCase       *** Violation of .NET Coding Guidelines ***
#  6  field    / private   / *           PascalCase       Same + (can be overridden)
#
#  7 == public_members_must_be_capitalized
#  7  method   / public    / *           Capitalized      *** PascalCase
#  7  method   / protected / *           Capitalized      *** PascalCase
#  7  property / public    / *           Capitalized      *** PascalCase
#  7  property / protected / *           Capitalized      *** PascalCase
#  7  event    / public    / *           Capitalized      *** PascalCase
#  7  event    / protected / *           Capitalized      *** PascalCase
#  7  delegate / public    / *           Capitalized      *** PascalCase
#  7  delegate / internal  / *           Capitalized      *** PascalCase
#  --------------------------------------------
#  7  method   / internal  / *           Capitalized      *** PascalCase + (can be overridden)
#  7  method   / prot+int  / *           Capitalized      *** PascalCase + (can be overridden)
#  7  property / internal  / *           Capitalized      *** PascalCase + (can be overridden)
#  7  property / prot+int  / *           Capitalized      *** PascalCase + (can be overridden)
#  7  event    / internal  / *           Capitalized      *** PascalCase + (can be overridden)
#  7  event    / prot+int  / *           Capitalized      *** PascalCase + (can be overridden)
#  7  delegate / protected / *           Capitalized      *** PascalCase + (can be overridden)
#  7  delegate / prot+int  / *           Capitalized      *** PascalCase + (can be overridden)

#  8 == parameters_must_be_camel_case
#  8  parameter / *        / *           camelCase        Same
#
#  9 == non_interface_types_must_be_pascal_case
#  9  class     / *        / *           PascalCase       Same
#  9  struct    / *        / *           PascalCase       Same
#  9  enum      / *        / *           PascalCase       Same
#  9  delegate  / *        / *           PascalCase       Same
#
# 10 == interface_types_must_be_prefixed_with_i
# 10  interface / *        / *    I + PascalCase   Same
#
# -- == ((( WILL NOT MATCH OLD RULE SET? )))
# --  field    / internal  / *           -----------      *** PascalCase + (can be overridden)
# --  field    / prot+int  / *           -----------      *** PascalCase + (can be overridden)
# --  method   / private   / *           -----------      *** PascalCase + (can be overridden)
# --  property / private   / *           -----------      *** PascalCase + (can be overridden)
# --  event    / private   / *           -----------      *** PascalCase + (can be overridden)
# --  delegate / private   / *           -----------      *** PascalCase + (can be overridden)
#
# =====================================================================
#
# Summary of differences:
#  2  field    / public    / readonly    PascalCase  --> Violation  # OK to differ here
#  2  field    / protected / readonly    PascalCase  --> Violation  # OK to differ here
#  5  field    / public    / *           PascalCase  --> Violation  # OK to differ here
#  6  field    / protected / *           PascalCase  --> Violation  # OK to differ here
#  7  method                             Capitalized --> PascalCase # (arguable, yes per examples at https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-methods)
#  7  property                           Capitalized --> PascalCase # https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-properties
#  7  event                              Capitalized --> PascalCase # (arguable, yes per examples at https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-events)
#  7  delegate                           Capitalized --> PascalCase # (arguable, yes per examples at https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-events)
#
# END OLD RULES =======================================================


# A. public_constant_fields_group
dotnet_naming_rule.public_constant_fields_must_be_pascal_case_rule.symbols  = public_constant_fields_group
dotnet_naming_rule.public_constant_fields_must_be_pascal_case_rule.style    = pascal_case_style
dotnet_naming_rule.public_constant_fields_must_be_pascal_case_rule.severity = warning

# B. public_static_readonly_fields_group
dotnet_naming_rule.public_static_readonly_fields_must_be_pascal_case_rule.symbols  = public_static_readonly_fields_group
dotnet_naming_rule.public_static_readonly_fields_must_be_pascal_case_rule.style    = pascal_case_style
dotnet_naming_rule.public_static_readonly_fields_must_be_pascal_case_rule.severity = warning

## C. all_constant_fields_group
#dotnet_naming_rule.all_constant_fields_must_be_pascal_case_rule.symbols  = all_static_readonly_fields_group
#dotnet_naming_rule.all_constant_fields_must_be_pascal_case_rule.style    = pascal_case_style
#dotnet_naming_rule.all_constant_fields_must_be_pascal_case_rule.severity = warning

## D. all_static_readonly_fields_group
#dotnet_naming_rule.all_static_readonly_fields_must_be_pascal_case_rule.symbols  = all_constant_fields_group
#dotnet_naming_rule.all_static_readonly_fields_must_be_pascal_case_rule.style    = pascal_case_style
#dotnet_naming_rule.all_static_readonly_fields_must_be_pascal_case_rule.severity = warning

## K. user_private_fields_group
#dotnet_naming_rule.user_private_fields_must_be_pascal_case_rule.symbols  = user_private_fields_group
#dotnet_naming_rule.user_private_fields_must_be_pascal_case_rule.style    = pascal_case_style
#dotnet_naming_rule.user_private_fields_must_be_pascal_case_rule.severity = warning

# L. private_fields_group -- SILENT -- no warnings about naming style for private fields ...
dotnet_naming_rule.private_fields_preference_is_pascal_case_rule.symbols  = private_fields_group
dotnet_naming_rule.private_fields_preference_is_pascal_case_rule.style    = pascal_case_style
dotnet_naming_rule.private_fields_preference_is_pascal_case_rule.severity = silent

# M. match_all_fields_group -- because all valid field symbols are matched above, this will only match disallowed field symbols
dotnet_naming_rule.disallowed_fields_should_be_made_obvious_rule.symbols  = match_all_fields_group
dotnet_naming_rule.disallowed_fields_should_be_made_obvious_rule.style    = disallowed_by_design_guidelines_style
dotnet_naming_rule.disallowed_fields_should_be_made_obvious_rule.severity = warning

# Q. public_symbols_group
dotnet_naming_rule.public_symbols_must_be_pascal_case_rule.symbols  = public_symbols_group
dotnet_naming_rule.public_symbols_must_be_pascal_case_rule.style    = pascal_case_style
dotnet_naming_rule.public_symbols_must_be_pascal_case_rule.severity = warning

# T. parameters_group
dotnet_naming_rule.parameters_must_always_be_pascal_case_rule.symbols  = parameters_group
dotnet_naming_rule.parameters_must_always_be_pascal_case_rule.style    = camel_case_style
dotnet_naming_rule.parameters_must_always_be_pascal_case_rule.severity = warning

# W. non_interface_types_group
dotnet_naming_rule.non_interface_types_must_be_pascal_case_rule.symbols  = non_interface_types_group
dotnet_naming_rule.non_interface_types_must_be_pascal_case_rule.style    = pascal_case_style
dotnet_naming_rule.non_interface_types_must_be_pascal_case_rule.severity = warning

# Z. interface_types_group
dotnet_naming_rule.interfaces_must_have_i_prefix_rule.symbols  = interface_types_group
dotnet_naming_rule.interfaces_must_have_i_prefix_rule.style    = prefix_interface_interface_with_i_style
dotnet_naming_rule.interfaces_must_have_i_prefix_rule.severity = warning
